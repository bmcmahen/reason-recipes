{"dependencies":[{"name":"bs-platform/lib/js/char.js","loc":{"line":4,"column":38}},{"name":"bs-platform/lib/js/list.js","loc":{"line":5,"column":38}},{"name":"bs-platform/lib/js/array.js","loc":{"line":6,"column":38}},{"name":"bs-platform/lib/js/block.js","loc":{"line":7,"column":38}},{"name":"bs-platform/lib/js/curry.js","loc":{"line":8,"column":38}},{"name":"bs-platform/lib/js/printf.js","loc":{"line":9,"column":38}},{"name":"bs-platform/lib/js/string.js","loc":{"line":10,"column":38}},{"name":"bs-platform/lib/js/hashtbl.js","loc":{"line":11,"column":38}},{"name":"bs-platform/lib/js/caml_int32.js","loc":{"line":12,"column":38}},{"name":"bs-platform/lib/js/pervasives.js","loc":{"line":13,"column":38}},{"name":"bs-platform/lib/js/caml_string.js","loc":{"line":14,"column":38}},{"name":"bs-platform/lib/js/caml_builtin_exceptions.js","loc":{"line":15,"column":38}}],"generated":{"js":"// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE\n'use strict';\n\nvar Char = require(\"bs-platform/lib/js/char.js\");\nvar List = require(\"bs-platform/lib/js/list.js\");\nvar $$Array = require(\"bs-platform/lib/js/array.js\");\nvar Block = require(\"bs-platform/lib/js/block.js\");\nvar Curry = require(\"bs-platform/lib/js/curry.js\");\nvar Printf = require(\"bs-platform/lib/js/printf.js\");\nvar $$String = require(\"bs-platform/lib/js/string.js\");\nvar Hashtbl = require(\"bs-platform/lib/js/hashtbl.js\");\nvar Caml_int32 = require(\"bs-platform/lib/js/caml_int32.js\");\nvar Pervasives = require(\"bs-platform/lib/js/pervasives.js\");\nvar Caml_string = require(\"bs-platform/lib/js/caml_string.js\");\nvar Caml_builtin_exceptions = require(\"bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction string_of_position(position) {\n  switch (position) {\n    case 0:\n      return \"absolute\";\n    case 1:\n      return \"relative\";\n    case 2:\n      return \"sticky\";\n    case 3:\n      return \"fixed\";\n\n  }\n}\n\nfunction string_of_flexDirection(direction) {\n  switch (direction) {\n    case 0:\n      return \"row\";\n    case 1:\n      return \"row-reverse\";\n    case 2:\n      return \"column\";\n    case 3:\n      return \"column-reverse\";\n\n  }\n}\n\nfunction string_of_flexWrap(wrap) {\n  if (wrap !== 0) {\n    return \"nowrap\";\n  } else {\n    return \"wrap\";\n  }\n}\n\nfunction string_of_justifyContent(justify) {\n  switch (justify) {\n    case 0:\n      return \"flex-start\";\n    case 1:\n      return \"flex-end\";\n    case 2:\n      return \"center\";\n    case 3:\n      return \"space-between\";\n    case 4:\n      return \"space-around\";\n\n  }\n}\n\nfunction string_of_alignItems(align) {\n  switch (align) {\n    case 0:\n      return \"flex-start\";\n    case 1:\n      return \"flex-end\";\n    case 2:\n      return \"center\";\n    case 3:\n      return \"stretch\";\n    case 4:\n      return \"baseline\";\n\n  }\n}\n\nfunction string_of_alignSelf(align) {\n  switch (align) {\n    case 0:\n      return \"auto\";\n    case 1:\n      return \"flex-start\";\n    case 2:\n      return \"flex-end\";\n    case 3:\n      return \"center\";\n    case 4:\n      return \"stretch\";\n    case 5:\n      return \"baseline\";\n\n  }\n}\n\nfunction string_of_alignContent(align) {\n  switch (align) {\n    case 0:\n      return \"flex-start\";\n    case 1:\n      return \"flex-end\";\n    case 2:\n      return \"center\";\n    case 3:\n      return \"stretch\";\n    case 4:\n      return \"space-between\";\n    case 5:\n      return \"space-around\";\n\n  }\n}\n\nfunction string_of_overflow(overflow) {\n  switch (overflow) {\n    case 0:\n      return \"visible\";\n    case 1:\n      return \"hidden\";\n    case 2:\n      return \"scroll\";\n\n  }\n}\n\nfunction string_of_display(display) {\n  switch (display) {\n    case 0:\n      return \"none\";\n    case 1:\n      return \"block\";\n    case 2:\n      return \"inline\";\n    case 3:\n      return \"inline-block\";\n    case 4:\n      return \"flex\";\n\n  }\n}\n\nfunction string_of_dimension(value) {\n  switch (value.tag | 0) {\n    case 0:\n      return Pervasives.string_of_int(value[0]) + \"px\";\n    case 1:\n      return Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), value[0]) + \"em\";\n    case 2:\n      return Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), value[0]) + \"%\";\n\n  }\n}\n\nfunction string_of_flexBasis(basis) {\n  switch (basis) {\n    case 0:\n      return \"auto\";\n    case 1:\n      return \"max-content\";\n    case 2:\n      return \"min-content\";\n    case 3:\n      return \"fit-content\";\n    case 4:\n      return \"content\";\n    case 5:\n      return \"inherit\";\n    case 6:\n      return \"initital\";\n    case 7:\n      return \"unset\";\n\n  }\n}\n\nfunction string_of_angle(angle) {\n  if (angle.tag) {\n    return Curry._1(Printf.sprintf( /* Format */[\n    /* Float */Block.__(8, [\n    /* Float_f */0,\n    /* No_padding */0,\n    /* No_precision */0,\n    /* End_of_format */0]), \"%f\"]), angle[0]) + \"rad\";\n  } else {\n    return Curry._1(Printf.sprintf( /* Format */[\n    /* Float */Block.__(8, [\n    /* Float_f */0,\n    /* No_padding */0,\n    /* No_precision */0,\n    /* End_of_format */0]), \"%f\"]), angle[0]) + \"deg\";\n  }\n}\n\nfunction string_of_transform(transform) {\n  switch (transform.tag | 0) {\n    case 0:\n      return \"perspective(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + \")\");\n    case 1:\n      return \"rotate(\" + (string_of_angle(transform[0]) + \")\");\n    case 2:\n      return \"rotateX(\" + (string_of_angle(transform[0]) + \")\");\n    case 3:\n      return \"rotateY(\" + (string_of_angle(transform[0]) + \")\");\n    case 4:\n      return \"rotateZ(\" + (string_of_angle(transform[0]) + \")\");\n    case 5:\n      return \"scale(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + \")\");\n    case 6:\n      return \"scaleX(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + \")\");\n    case 7:\n      return \"scaleY(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + \")\");\n    case 8:\n      return \"scaleZ(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + \")\");\n    case 9:\n      return \"translate(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + (\", \" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[1]) + \")\")));\n    case 10:\n      return \"translateX(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + \")\");\n    case 11:\n      return \"translateY(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + \")\");\n    case 12:\n      return \"translateZ(\" + (Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), transform[0]) + \")\");\n    case 13:\n      return \"skewX(\" + (string_of_angle(transform[0]) + \")\");\n    case 14:\n      return \"skewY(\" + (string_of_angle(transform[0]) + \")\");\n\n  }\n}\n\nfunction string_of_color(color) {\n  if (typeof color === \"number\") {\n    switch (color) {\n      case 0:\n        return \"transparent\";\n      case 1:\n        return \"aliceblue\";\n      case 2:\n        return \"antiquewhite\";\n      case 3:\n        return \"aqua\";\n      case 4:\n        return \"aquamarine\";\n      case 5:\n        return \"azure\";\n      case 6:\n        return \"beige\";\n      case 7:\n        return \"bisque\";\n      case 8:\n        return \"black\";\n      case 9:\n        return \"blanchedalmond\";\n      case 10:\n        return \"blue\";\n      case 11:\n        return \"blueviolet\";\n      case 12:\n        return \"brown\";\n      case 13:\n        return \"burlywood\";\n      case 14:\n        return \"cadetblue\";\n      case 15:\n        return \"chartreuse\";\n      case 16:\n        return \"chocolate\";\n      case 17:\n        return \"coral\";\n      case 18:\n        return \"cornflowerblue\";\n      case 19:\n        return \"cornsilk\";\n      case 20:\n        return \"crimson\";\n      case 21:\n        return \"cyan\";\n      case 22:\n        return \"darkblue\";\n      case 23:\n        return \"darkcyan\";\n      case 24:\n        return \"darkgoldenrod\";\n      case 25:\n        return \"darkgray\";\n      case 26:\n        return \"darkgreen\";\n      case 27:\n        return \"darkgrey\";\n      case 28:\n        return \"darkkhaki\";\n      case 29:\n        return \"darkmagenta\";\n      case 30:\n        return \"darkolivegreen\";\n      case 31:\n        return \"darkorange\";\n      case 32:\n        return \"darkorchid\";\n      case 33:\n        return \"darkred\";\n      case 34:\n        return \"darksalmon\";\n      case 35:\n        return \"darkseagreen\";\n      case 36:\n        return \"darkslateblue\";\n      case 37:\n        return \"darkslategrey\";\n      case 38:\n        return \"darkturquoise\";\n      case 39:\n        return \"darkviolet\";\n      case 40:\n        return \"deeppink\";\n      case 41:\n        return \"deepskyblue\";\n      case 42:\n        return \"dimgray\";\n      case 43:\n        return \"dimgrey\";\n      case 44:\n        return \"dodgerblue\";\n      case 45:\n        return \"firebrick\";\n      case 46:\n        return \"floralwhite\";\n      case 47:\n        return \"forestgreen\";\n      case 48:\n        return \"fuchsia\";\n      case 49:\n        return \"gainsboro\";\n      case 50:\n        return \"ghostwhite\";\n      case 51:\n        return \"gold\";\n      case 52:\n        return \"goldenrod\";\n      case 53:\n        return \"gray\";\n      case 54:\n        return \"green\";\n      case 55:\n        return \"greenyellow\";\n      case 56:\n        return \"grey\";\n      case 57:\n        return \"honeydew\";\n      case 58:\n        return \"hotpink\";\n      case 59:\n        return \"indianred\";\n      case 60:\n        return \"indigo\";\n      case 61:\n        return \"ivory\";\n      case 62:\n        return \"khaki\";\n      case 63:\n        return \"lavender\";\n      case 64:\n        return \"lavenderblush\";\n      case 65:\n        return \"lawngreen\";\n      case 66:\n        return \"lemonchiffon\";\n      case 67:\n        return \"lightblue\";\n      case 68:\n        return \"lightcoral\";\n      case 69:\n        return \"lightcyan\";\n      case 70:\n        return \"lightgoldenrodyellow\";\n      case 71:\n        return \"lightgray\";\n      case 72:\n        return \"lightgreen\";\n      case 73:\n        return \"lightgrey\";\n      case 74:\n        return \"lightpink\";\n      case 75:\n        return \"lightsalmon\";\n      case 76:\n        return \"lightseagreen\";\n      case 77:\n        return \"lightskyblue\";\n      case 78:\n        return \"lightslategrey\";\n      case 79:\n        return \"lightsteelblue\";\n      case 80:\n        return \"lightyellow\";\n      case 81:\n        return \"lime\";\n      case 82:\n        return \"limegreen\";\n      case 83:\n        return \"linen\";\n      case 84:\n        return \"magenta\";\n      case 85:\n        return \"maroon\";\n      case 86:\n        return \"mediumaquamarine\";\n      case 87:\n        return \"mediumblue\";\n      case 88:\n        return \"mediumorchid\";\n      case 89:\n        return \"mediumpurple\";\n      case 90:\n        return \"mediumseagreen\";\n      case 91:\n        return \"mediumslateblue\";\n      case 92:\n        return \"mediumspringgreen\";\n      case 93:\n        return \"mediumturquoise\";\n      case 94:\n        return \"mediumvioletred\";\n      case 95:\n        return \"midnightblue\";\n      case 96:\n        return \"mintcream\";\n      case 97:\n        return \"mistyrose\";\n      case 98:\n        return \"moccasin\";\n      case 99:\n        return \"navajowhite\";\n      case 100:\n        return \"navy\";\n      case 101:\n        return \"oldlace\";\n      case 102:\n        return \"olive\";\n      case 103:\n        return \"olivedrab\";\n      case 104:\n        return \"orange\";\n      case 105:\n        return \"orangered\";\n      case 106:\n        return \"orchid\";\n      case 107:\n        return \"palegoldenrod\";\n      case 108:\n        return \"palegreen\";\n      case 109:\n        return \"paleturquoise\";\n      case 110:\n        return \"palevioletred\";\n      case 111:\n        return \"papayawhip\";\n      case 112:\n        return \"peachpuff\";\n      case 113:\n        return \"peru\";\n      case 114:\n        return \"pink\";\n      case 115:\n        return \"plum\";\n      case 116:\n        return \"powderblue\";\n      case 117:\n        return \"purple\";\n      case 118:\n        return \"rebeccapurple\";\n      case 119:\n        return \"red\";\n      case 120:\n        return \"rosybrown\";\n      case 121:\n        return \"royalblue\";\n      case 122:\n        return \"saddlebrown\";\n      case 123:\n        return \"salmon\";\n      case 124:\n        return \"sandybrown\";\n      case 125:\n        return \"seagreen\";\n      case 126:\n        return \"seashell\";\n      case 127:\n        return \"sienna\";\n      case 128:\n        return \"silver\";\n      case 129:\n        return \"skyblue\";\n      case 130:\n        return \"slateblue\";\n      case 131:\n        return \"slategray\";\n      case 132:\n        return \"snow\";\n      case 133:\n        return \"springgreen\";\n      case 134:\n        return \"steelblue\";\n      case 135:\n        return \"tan\";\n      case 136:\n        return \"teal\";\n      case 137:\n        return \"thistle\";\n      case 138:\n        return \"tomato\";\n      case 139:\n        return \"turquoise\";\n      case 140:\n        return \"violet\";\n      case 141:\n        return \"wheat\";\n      case 142:\n        return \"white\";\n      case 143:\n        return \"whitesmoke\";\n      case 144:\n        return \"yellow\";\n      case 145:\n        return \"yellowgreen\";\n\n    }\n  } else {\n    switch (color.tag | 0) {\n      case 0:\n      case 2:\n        return Pervasives.string_of_int(color[0]) + (\",\" + (Pervasives.string_of_int(color[1]) + (\",\" + Pervasives.string_of_int(color[2]))));\n      case 1:\n      case 3:\n        return Pervasives.string_of_int(color[0]) + (\",\" + (Pervasives.string_of_int(color[1]) + (\",\" + (Pervasives.string_of_int(color[2]) + (\",\" + Curry._1(Printf.sprintf( /* Format */[\n        /* Float */Block.__(8, [\n        /* Float_f */0,\n        /* No_padding */0,\n        /* No_precision */0,\n        /* End_of_format */0]), \"%f\"]), color[3]))))));\n\n    }\n  }\n}\n\nfunction string_of_fontWeight(weight) {\n  switch (weight) {\n    case 0:\n      return \"normal\";\n    case 1:\n      return \"bold\";\n    case 2:\n      return \"100\";\n    case 3:\n      return \"200\";\n    case 4:\n      return \"300\";\n    case 5:\n      return \"400\";\n    case 6:\n      return \"500\";\n    case 7:\n      return \"600\";\n    case 8:\n      return \"700\";\n    case 9:\n      return \"800\";\n    case 10:\n      return \"900\";\n\n  }\n}\n\nfunction string_of_backfaceVisibilty(backfaceVisibilty) {\n  if (backfaceVisibilty !== 0) {\n    return \"hidden\";\n  } else {\n    return \"visible\";\n  }\n}\n\nfunction string_of_cursor() {\n  return \"pointer\";\n}\n\nfunction string_of_borderStyle(borderStyle) {\n  switch (borderStyle) {\n    case 0:\n      return \"solid\";\n    case 1:\n      return \"dotted\";\n    case 2:\n      return \"dashed\";\n\n  }\n}\n\nfunction string_of_fontStyle(fontStyle) {\n  if (fontStyle !== 0) {\n    return \"italic\";\n  } else {\n    return \"normal\";\n  }\n}\n\nfunction string_of_fontVariant(fontVariant) {\n  switch (fontVariant) {\n    case 0:\n      return \"small-caps\";\n    case 1:\n      return \"old-style-nums\";\n    case 2:\n      return \"lining-nums\";\n    case 3:\n      return \"tabular-nums\";\n    case 4:\n      return \"proportional-nums\";\n\n  }\n}\n\nfunction string_of_textAlign(textAlign) {\n  switch (textAlign) {\n    case 0:\n      return \"auto\";\n    case 1:\n      return \"left\";\n    case 2:\n      return \"right\";\n    case 3:\n      return \"center\";\n    case 4:\n      return \"justify\";\n\n  }\n}\n\nfunction string_of_textAlignVertical(textAlignVertical) {\n  switch (textAlignVertical) {\n    case 0:\n      return \"auto\";\n    case 1:\n      return \"top\";\n    case 2:\n      return \"bottom\";\n    case 3:\n      return \"center\";\n\n  }\n}\n\nfunction string_of_textDecorationLine(textDecorationLine) {\n  switch (textDecorationLine) {\n    case 0:\n      return \"none\";\n    case 1:\n      return \"underline\";\n    case 2:\n      return \"line-through\";\n    case 3:\n      return \"underline line-through\";\n\n  }\n}\n\nfunction string_of_textDecorationStyle(textDecorationStyle) {\n  switch (textDecorationStyle) {\n    case 0:\n      return \"solid\";\n    case 1:\n      return \"double\";\n    case 2:\n      return \"dotted\";\n    case 3:\n      return \"dashed\";\n\n  }\n}\n\nfunction string_of_writingDirection(writingDirection) {\n  switch (writingDirection) {\n    case 0:\n      return \"auto\";\n    case 1:\n      return \"ltr\";\n    case 2:\n      return \"rtl\";\n\n  }\n}\n\nfunction string_of_resizeMode(resizeMode) {\n  switch (resizeMode) {\n    case 0:\n      return \"contain\";\n    case 1:\n      return \"cover\";\n    case 2:\n      return \"stretch\";\n    case 3:\n      return \"center\";\n    case 4:\n      return \"repeat\";\n\n  }\n}\n\nfunction string_of_style(style) {\n  switch (style.tag | 0) {\n    case 0:\n      return \"display:\" + string_of_display(style[0]);\n    case 1:\n      return \"width:\" + string_of_dimension(style[0]);\n    case 2:\n      return \"cursor:pointer\";\n    case 3:\n      return \"height:\" + string_of_dimension(style[0]);\n    case 4:\n      return \"top:\" + string_of_dimension(style[0]);\n    case 5:\n      return \"bottom:\" + string_of_dimension(style[0]);\n    case 6:\n      return \"left:\" + string_of_dimension(style[0]);\n    case 7:\n      return \"right:\" + string_of_dimension(style[0]);\n    case 8:\n      return \"min-width:\" + string_of_dimension(style[0]);\n    case 9:\n      return \"max-width:\" + string_of_dimension(style[0]);\n    case 10:\n      return \"minheight:\" + string_of_dimension(style[0]);\n    case 11:\n      return \"maxheight:\" + string_of_dimension(style[0]);\n    case 12:\n      return \"margin:\" + string_of_dimension(style[0]);\n    case 13:\n      return \"margin-vertical:\" + string_of_dimension(style[0]);\n    case 14:\n      return \"margin-horizontal:\" + string_of_dimension(style[0]);\n    case 15:\n      return \"margin-top:\" + string_of_dimension(style[0]);\n    case 16:\n      return \"margin-bottom:\" + string_of_dimension(style[0]);\n    case 17:\n      return \"margin-left:\" + string_of_dimension(style[0]);\n    case 18:\n      return \"margin-right:\" + string_of_dimension(style[0]);\n    case 19:\n      return \"padding:\" + string_of_dimension(style[0]);\n    case 20:\n      return \"padding-vertical:\" + string_of_dimension(style[0]);\n    case 21:\n      return \"padding-horizontal:\" + string_of_dimension(style[0]);\n    case 22:\n      return \"padding-top:\" + string_of_dimension(style[0]);\n    case 23:\n      return \"padding-bottom:\" + string_of_dimension(style[0]);\n    case 24:\n      return \"padding-left:\" + string_of_dimension(style[0]);\n    case 25:\n      return \"padding-right:\" + string_of_dimension(style[0]);\n    case 26:\n      return \"border-width:\" + string_of_dimension(style[0]);\n    case 27:\n      return \"border-top-width:\" + string_of_dimension(style[0]);\n    case 28:\n      return \"border-bottom-width:\" + string_of_dimension(style[0]);\n    case 29:\n      return \"border-left-width:\" + string_of_dimension(style[0]);\n    case 30:\n      return \"border-right-width:\" + string_of_dimension(style[0]);\n    case 31:\n      return \"position:\" + string_of_position(style[0]);\n    case 32:\n      return \"flex-direction:\" + string_of_flexDirection(style[0]);\n    case 33:\n      return \"flex-wrap:\" + string_of_flexWrap(style[0]);\n    case 34:\n      return \"justify-content:\" + string_of_justifyContent(style[0]);\n    case 35:\n      return \"align-items:\" + string_of_alignItems(style[0]);\n    case 36:\n      return \"align-self:\" + string_of_alignSelf(style[0]);\n    case 37:\n      return \"align-content:\" + string_of_alignContent(style[0]);\n    case 38:\n      return \"overflow:\" + string_of_overflow(style[0]);\n    case 39:\n      return \"flex:\" + Pervasives.string_of_int(style[0]);\n    case 40:\n      return \"flex-grow:\" + Pervasives.string_of_int(style[0]);\n    case 41:\n      return \"flex-shrink:\" + Pervasives.string_of_int(style[0]);\n    case 42:\n      return \"flex-basis:\" + Pervasives.string_of_int(style[0]);\n    case 43:\n      return \"flex-basis:\" + string_of_flexBasis(style[0]);\n    case 44:\n      return \"shadow-color:\" + string_of_color(style[0]);\n    case 45:\n      return \"shadow-offset:\" + (Pervasives.string_of_int(style[0]) + (\",\" + Pervasives.string_of_int(style[1])));\n    case 46:\n      return \"shadow-opacity:\" + Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), style[0]);\n    case 47:\n      return \"shadow-radius:\" + Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), style[0]);\n    case 48:\n      return \"box-shadow:\" + style[0];\n    case 49:\n      return \"transform:\" + $$String.concat(\",\", List.map(string_of_transform, style[0]));\n    case 50:\n      return \"backface-visibilty:\" + string_of_backfaceVisibilty(style[0]);\n    case 51:\n      return \"background-color:\" + string_of_color(style[0]);\n    case 52:\n      return \"background-image:\" + style[0];\n    case 53:\n      return \"border-color:\" + string_of_color(style[0]);\n    case 54:\n      return \"border-top-color:\" + string_of_color(style[0]);\n    case 55:\n      return \"border-bottom-color:\" + string_of_color(style[0]);\n    case 56:\n      return \"border-left-color:\" + string_of_color(style[0]);\n    case 57:\n      return \"border-right-color:\" + string_of_color(style[0]);\n    case 58:\n      return \"border-radius:\" + string_of_dimension(style[0]);\n    case 59:\n      return \"border-top-right-radius:\" + string_of_dimension(style[0]);\n    case 60:\n      return \"border-bottom-left-radius:\" + string_of_dimension(style[0]);\n    case 61:\n      return \"border-bottom-right-radius:\" + string_of_dimension(style[0]);\n    case 62:\n      return \"border-top-left-radius:\" + string_of_dimension(style[0]);\n    case 63:\n      return \"border-style:\" + string_of_borderStyle(style[0]);\n    case 64:\n      return \"opacity:\" + Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), style[0]);\n    case 65:\n      return \"elevation:\" + Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), style[0]);\n    case 66:\n      return \"color:\" + string_of_color(style[0]);\n    case 67:\n      return \"font-family:\" + style[0];\n    case 68:\n      return \"font-size:\" + string_of_dimension(style[0]);\n    case 69:\n      return \"font-style:\" + string_of_fontStyle(style[0]);\n    case 70:\n      return \"font-weight:\" + string_of_fontWeight(style[0]);\n    case 71:\n      return \"font-variant:\" + string_of_fontVariant(style[0]);\n    case 73:\n      return \"text-shadow-radius:\" + Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), style[0]);\n    case 74:\n      return \"text-shadow-color:\" + string_of_color(style[0]);\n    case 75:\n      return \"letter-spacing:\" + Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), style[0]);\n    case 76:\n      return \"line-height:\" + Curry._1(Printf.sprintf( /* Format */[\n      /* Float */Block.__(8, [\n      /* Float_f */0,\n      /* No_padding */0,\n      /* No_precision */0,\n      /* End_of_format */0]), \"%f\"]), style[0]);\n    case 77:\n      return \"text-align:\" + string_of_textAlign(style[0]);\n    case 78:\n      return \"text-align-vertical:\" + string_of_textAlignVertical(style[0]);\n    case 79:\n      return \"includefontpadding:\" + Pervasives.string_of_bool(style[0]);\n    case 80:\n      return \"text-decoration-line:\" + string_of_textDecorationLine(style[0]);\n    case 81:\n      return \"text-decoration-color:\" + string_of_color(style[0]);\n    case 82:\n      return \"writing-direction:\" + string_of_writingDirection(style[0]);\n    case 83:\n      return \"resizemode:\" + string_of_resizeMode(style[0]);\n    case 84:\n      return \"tintcolor:\" + string_of_color(style[0]);\n    case 85:\n      return \"overlay-color\" + string_of_color(style[0]);\n    case 89:\n      return style[0] + (\":\" + style[1]);\n    default:\n      throw Caml_builtin_exceptions.not_found;\n  }\n}\n\nvar splitSelector = function (selector) {\n  if (selector.indexOf(',') === -1) {\n    return [selector];\n  }\n\n  var indices = [],\n      res = [],\n      inParen = 0,\n      o;\n  /*eslint-disable no-cond-assign*/\n  while (o = selectorTokenizer.exec(selector)) {\n    /*eslint-enable no-cond-assign*/\n    switch (o[0]) {\n      case '(':\n        inParen++;break;\n      case ')':\n        inParen--;break;\n      case ',':\n        if (inParen) break;indices.push(o.index);\n    }\n  }\n  for (o = indices.length; o--;) {\n    res.unshift(selector.slice(indices[o] + 1));\n    selector = selector.slice(0, indices[o]);\n  }\n  res.unshift(selector);\n  return res;\n};\n\nvar replace = function (src, _with) {\n  return src.replace(/\\&/g, _with);\n};\n\nfunction join_selectors(a, b) {\n  var ax = $$Array.to_list($$Array.map(function (a) {\n    var match = $$String.contains(a, /* \"&\" */38);\n    if (match !== 0) {\n      return a;\n    } else {\n      return \"&\" + a;\n    }\n  }, Curry._1(splitSelector, a)));\n  var bx = $$Array.to_list($$Array.map(function (b) {\n    var match = $$String.contains(b, /* \"&\" */38);\n    if (match !== 0) {\n      return b;\n    } else {\n      return \"&\" + b;\n    }\n  }, Curry._1(splitSelector, b)));\n  return $$String.concat(\",\", List.fold_left(function (arr, b) {\n    return List.concat( /* :: */[arr,\n    /* :: */[List.map(function (a) {\n      return Curry._2(replace, b, a);\n    }, ax),\n    /* [] */0]]);\n  }, /* [] */0, bx));\n}\n\nfunction string_of_scope(scope, hash, content) {\n  var prefix = \"\";\n  var suffix = \"\";\n  if (List.length(scope[/* mqs */0]) > 0) {\n    prefix = \"@media \" + ($$String.concat(\" and \", scope[/* mqs */0]) + \"{\");\n    suffix = suffix + \"}\";\n  }\n  if (List.length(scope[/* supps */1]) > 0) {\n    suffix = suffix + \"}\";\n    prefix = prefix + (\"@supports \" + ($$String.concat(\" and \", scope[/* supps */1]) + \"{\"));\n  }\n  if (List.length(scope[/* selectors */2]) > 0) {\n    prefix = prefix + Curry._2(replace, List.fold_left(join_selectors, \"\", scope[/* selectors */2]), hash);\n  }\n  prefix = prefix + \"{\";\n  suffix = suffix + \"}\";\n  return prefix + (content + suffix);\n}\n\nvar blankScope = /* record */[\n/* mqs : [] */0,\n/* supps : [] */0,\n/* selectors : :: */[\"&\",\n/* [] */0]];\n\nfunction walk(decls, scope) {\n  return List.fold_left(function (acc, style) {\n    switch (style.tag | 0) {\n      case 86:\n        return List.concat( /* :: */[acc,\n        /* :: */[walk(style[1], /* record */[\n        /* mqs */List.concat( /* :: */[scope[/* mqs */0],\n        /* :: */[\n        /* :: */[style[0],\n        /* [] */0],\n        /* [] */0]]),\n        /* supps */scope[/* supps */1],\n        /* selectors */scope[/* selectors */2]]),\n        /* [] */0]]);\n      case 87:\n        return List.concat( /* :: */[acc,\n        /* :: */[walk(style[1], /* record */[\n        /* mqs */scope[/* mqs */0],\n        /* supps */List.concat( /* :: */[scope[/* supps */1],\n        /* :: */[\n        /* :: */[style[0],\n        /* [] */0],\n        /* [] */0]]),\n        /* selectors */scope[/* selectors */2]]),\n        /* [] */0]]);\n      case 88:\n        return List.concat( /* :: */[acc,\n        /* :: */[walk(style[1], /* record */[\n        /* mqs */scope[/* mqs */0],\n        /* supps */scope[/* supps */1],\n        /* selectors */List.concat( /* :: */[scope[/* selectors */2],\n        /* :: */[\n        /* :: */[style[0],\n        /* [] */0],\n        /* [] */0]])]),\n        /* [] */0]]);\n      default:\n        return List.concat( /* :: */[acc,\n        /* :: */[\n        /* :: */[\n        /* tuple */[scope, style],\n        /* [] */0],\n        /* [] */0]]);\n    }\n  }, /* [] */0, decls);\n}\n\nfunction group(normalized) {\n  var match = List.fold_left(function (param, param$1) {\n    var style = param$1[1];\n    var scope = param$1[0];\n    var styles = param[2];\n    var lastScope = param[1];\n    var rest = param[0];\n    var match = +(lastScope === scope);\n    if (match !== 0) {\n      return (/* tuple */[rest, scope, List.concat( /* :: */[styles,\n        /* :: */[\n        /* :: */[style,\n        /* [] */0],\n        /* [] */0]])]\n      );\n    } else {\n      return (/* tuple */[List.concat( /* :: */[rest,\n        /* :: */[\n        /* :: */[\n        /* tuple */[lastScope, styles],\n        /* [] */0],\n        /* [] */0]]), scope,\n        /* :: */[style,\n        /* [] */0]]\n      );\n    }\n  }, /* tuple */[\n  /* [] */0, blankScope,\n  /* [] */0], normalized);\n  return List.concat( /* :: */[match[0],\n  /* :: */[\n  /* :: */[\n  /* tuple */[match[1], match[2]],\n  /* [] */0],\n  /* [] */0]]);\n}\n\nfunction flatten(decls) {\n  return group(walk(decls, blankScope));\n}\n\nvar injected = Hashtbl.create( /* None */0, 100);\n\nvar insertRule = function (rule) {\n  var tag = document.querySelector('style[data-nice]');\n  if (!tag) {\n    tag = document.createElement('style');\n    tag.setAttribute('data-nice', '');\n    document.head.appendChild(tag);\n  }\n  if (\"development\" === 'production') {\n    tag.sheet.insertRule(rule, tag.sheet.cssRules.length);\n  } else {\n    tag.appendChild(document.createTextNode(rule));\n  }\n};\n\nfunction base62_of_int($$int) {\n  var fn = function (n, c) {\n    if (n !== 0) {\n      return fn(n / 62 | 0, Char.escaped(Caml_string.get(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", n - Caml_int32.imul(62, n / 62 | 0) | 0))) + c;\n    } else {\n      return c;\n    }\n  };\n  return fn(Pervasives.abs($$int), \"\");\n}\n\nfunction insert(nodes, hash) {\n  if (Hashtbl.mem(injected, nodes)) {\n    return 0;\n  } else {\n    var cssRules = List.map(function (param) {\n      return string_of_scope(param[0], hash, $$String.concat(\";\", List.map(string_of_style, param[1])));\n    }, List.filter(function (param) {\n      return +(param[1] !== /* [] */0);\n    })(nodes));\n    List.map(insertRule, cssRules);\n    return Hashtbl.add(injected, nodes, /* true */1);\n  }\n}\n\nfunction css(decls) {\n  var flattened = group(walk(decls, blankScope));\n  var className = \"css-\" + base62_of_int(Hashtbl.hash(flattened));\n  insert(flattened, \".\" + className);\n  return className;\n}\n\nfunction $$global(select, decls) {\n  var flattened = group(walk(decls, blankScope));\n  insert(flattened, select);\n  return (/* () */0\n  );\n}\n\nfunction keyframes() {\n  return (/* () */0\n  );\n}\n\nfunction animation() {\n  return (/* () */0\n  );\n}\n\nfunction fontFace() {\n  return (/* () */0\n  );\n}\n\nfunction rehydrate() {\n  return (/* () */0\n  );\n}\n\nfunction extract() {\n  return (/* [] */0\n  );\n}\n\nvar Presets = /* module */[\n/* mobile */\"(min-width:400px)\",\n/* phablet */\"(min-width:550px)\",\n/* tablet */\"(min-width:750px)\",\n/* desktop */\"(min-width:1000px)\",\n/* hd */\"(min-width:1200px)\"];\n\nexports.string_of_position = string_of_position;\nexports.string_of_flexDirection = string_of_flexDirection;\nexports.string_of_flexWrap = string_of_flexWrap;\nexports.string_of_justifyContent = string_of_justifyContent;\nexports.string_of_alignItems = string_of_alignItems;\nexports.string_of_alignSelf = string_of_alignSelf;\nexports.string_of_alignContent = string_of_alignContent;\nexports.string_of_overflow = string_of_overflow;\nexports.string_of_display = string_of_display;\nexports.string_of_dimension = string_of_dimension;\nexports.string_of_flexBasis = string_of_flexBasis;\nexports.string_of_angle = string_of_angle;\nexports.string_of_transform = string_of_transform;\nexports.string_of_color = string_of_color;\nexports.string_of_fontWeight = string_of_fontWeight;\nexports.string_of_backfaceVisibilty = string_of_backfaceVisibilty;\nexports.string_of_cursor = string_of_cursor;\nexports.string_of_borderStyle = string_of_borderStyle;\nexports.string_of_fontStyle = string_of_fontStyle;\nexports.string_of_fontVariant = string_of_fontVariant;\nexports.string_of_textAlign = string_of_textAlign;\nexports.string_of_textAlignVertical = string_of_textAlignVertical;\nexports.string_of_textDecorationLine = string_of_textDecorationLine;\nexports.string_of_textDecorationStyle = string_of_textDecorationStyle;\nexports.string_of_writingDirection = string_of_writingDirection;\nexports.string_of_resizeMode = string_of_resizeMode;\nexports.string_of_style = string_of_style;\nexports.splitSelector = splitSelector;\nexports.replace = replace;\nexports.join_selectors = join_selectors;\nexports.string_of_scope = string_of_scope;\nexports.blankScope = blankScope;\nexports.walk = walk;\nexports.group = group;\nexports.flatten = flatten;\nexports.injected = injected;\nexports.insertRule = insertRule;\nexports.base62_of_int = base62_of_int;\nexports.insert = insert;\nexports.css = css;\nexports.$$global = $$global;\nexports.keyframes = keyframes;\nexports.animation = animation;\nexports.fontFace = fontFace;\nexports.rehydrate = rehydrate;\nexports.extract = extract;\nexports.Presets = Presets;\n/* splitSelector Not a pure module */"},"hash":"c7476ff14b92ee914933fdfc6d157c6b"}