{"dependencies":[{"name":"./bundle-url","loc":{"line":1,"column":27}}],"generated":{"js":"var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundles(bundles) {\n  var id = Array.isArray(bundles) ? bundles[bundles.length - 1] : bundles;\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        Promise.all(bundles.slice(0, -1).map(loadBundle)).then(function () {\n          return require(id);\n        }).then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nmodule.exports = exports = loadBundles;\n\nvar bundles = {};\nvar bundleLoaders = {\n  js: loadJSBundle,\n  css: loadCSSBundle\n};\n\nfunction loadBundle(bundle) {\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = bundle.match(/\\.(.+)$/)[1].toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle);\n  }\n}\n\nfunction loadJSBundle(bundle) {\n  return new Promise(function (resolve, reject) {\n    var script = document.createElement('script');\n    script.async = true;\n    script.type = 'text/javascript';\n    script.charset = 'utf-8';\n    script.src = bundle;\n    script.onerror = function (e) {\n      script.onerror = script.onload = null;\n      reject(e);\n    };\n\n    script.onload = function () {\n      script.onerror = script.onload = null;\n      resolve();\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n}\n\nfunction loadCSSBundle(bundle) {\n  return new Promise(function (resolve, reject) {\n    var link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = bundle;\n    link.onerror = function (e) {\n      link.onerror = link.onload = null;\n      reject(e);\n    };\n\n    link.onload = function () {\n      link.onerror = link.onload = null;\n      resolve();\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(link);\n  });\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  return this.promise || (this.promise = new Promise(this.executor).then(onSuccess, onError));\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  return this.promise || (this.promise = new Promise(this.executor).catch(onError));\n};\n"},"hash":"3ff0c0aaaace9116d5f406a04b15a2ae"}