{"dependencies":[{"name":"./marshal.js","loc":{"line":3,"column":38}},{"name":"./caml_array.js","loc":{"line":4,"column":38}},{"name":"./caml_missing_polyfill.js","loc":{"line":5,"column":38}},{"name":"./caml_builtin_exceptions.js","loc":{"line":6,"column":38}}],"generated":{"js":"'use strict';\n\nvar Marshal                 = require(\"./marshal.js\");\nvar Caml_array              = require(\"./caml_array.js\");\nvar Caml_missing_polyfill   = require(\"./caml_missing_polyfill.js\");\nvar Caml_builtin_exceptions = require(\"./caml_builtin_exceptions.js\");\n\nvar double_field = Caml_array.caml_array_get;\n\nvar set_double_field = Caml_array.caml_array_set;\n\nfunction marshal() {\n  return Caml_missing_polyfill.not_implemented(\"caml_output_value_to_string not implemented by bucklescript yet\\n\");\n}\n\nfunction unmarshal(str, pos) {\n  return /* tuple */[\n          Marshal.from_bytes(str, pos),\n          pos + Marshal.total_size(str, pos) | 0\n        ];\n}\n\nfunction extension_slot(x) {\n  var slot = x.length !== undefined && (x.tag | 0) !== 248 && x.length >= 1 ? x[0] : x;\n  var name;\n  if (slot.length !== undefined && slot.tag === 248) {\n    name = slot[0];\n  } else {\n    throw Caml_builtin_exceptions.not_found;\n  }\n  if (name.tag === 252) {\n    return slot;\n  } else {\n    throw Caml_builtin_exceptions.not_found;\n  }\n}\n\nfunction extension_name(x) {\n  try {\n    var slot = extension_slot(x);\n    return slot[0];\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Obj.extension_name\"\n          ];\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction extension_id(x) {\n  try {\n    var slot = extension_slot(x);\n    return slot[1];\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Obj.extension_id\"\n          ];\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction extension_slot$1(x) {\n  try {\n    return extension_slot(x);\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Obj.extension_slot\"\n          ];\n    } else {\n      throw exn;\n    }\n  }\n}\n\nvar first_non_constant_constructor_tag = 0;\n\nvar last_non_constant_constructor_tag = 245;\n\nvar lazy_tag = 246;\n\nvar closure_tag = 247;\n\nvar object_tag = 248;\n\nvar infix_tag = 249;\n\nvar forward_tag = 250;\n\nvar no_scan_tag = 251;\n\nvar abstract_tag = 251;\n\nvar string_tag = 252;\n\nvar double_tag = 253;\n\nvar double_array_tag = 254;\n\nvar custom_tag = 255;\n\nvar final_tag = 255;\n\nvar int_tag = 1000;\n\nvar out_of_heap_tag = 1001;\n\nvar unaligned_tag = 1002;\n\nexports.double_field                       = double_field;\nexports.set_double_field                   = set_double_field;\nexports.first_non_constant_constructor_tag = first_non_constant_constructor_tag;\nexports.last_non_constant_constructor_tag  = last_non_constant_constructor_tag;\nexports.lazy_tag                           = lazy_tag;\nexports.closure_tag                        = closure_tag;\nexports.object_tag                         = object_tag;\nexports.infix_tag                          = infix_tag;\nexports.forward_tag                        = forward_tag;\nexports.no_scan_tag                        = no_scan_tag;\nexports.abstract_tag                       = abstract_tag;\nexports.string_tag                         = string_tag;\nexports.double_tag                         = double_tag;\nexports.double_array_tag                   = double_array_tag;\nexports.custom_tag                         = custom_tag;\nexports.final_tag                          = final_tag;\nexports.int_tag                            = int_tag;\nexports.out_of_heap_tag                    = out_of_heap_tag;\nexports.unaligned_tag                      = unaligned_tag;\nexports.extension_name                     = extension_name;\nexports.extension_id                       = extension_id;\nexports.extension_slot                     = extension_slot$1;\nexports.marshal                            = marshal;\nexports.unmarshal                          = unmarshal;\n/* No side effect */\n"},"hash":"c78ab3651a1fe96f59d02a0579fde29f"}