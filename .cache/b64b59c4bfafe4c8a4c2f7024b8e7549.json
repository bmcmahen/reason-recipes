{"dependencies":[{"name":"./block.js","loc":{"line":3,"column":38}},{"name":"./caml_builtin_exceptions.js","loc":{"line":4,"column":38}}],"generated":{"js":"'use strict';\n\nvar Block                   = require(\"./block.js\");\nvar Caml_builtin_exceptions = require(\"./caml_builtin_exceptions.js\");\n\nfunction caml_obj_dup(x) {\n  var len = x.length | 0;\n  var v = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    v[i] = x[i];\n  }\n  v.tag = x.tag | 0;\n  return v;\n}\n\nfunction caml_obj_truncate(x, new_size) {\n  var len = x.length | 0;\n  if (new_size <= 0 || new_size > len) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Obj.truncate\"\n        ];\n  } else if (len !== new_size) {\n    for(var i = new_size ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n      x[i] = 0;\n    }\n    x.length = new_size;\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_lazy_make_forward(x) {\n  return Block.__(250, [x]);\n}\n\nfunction caml_update_dummy(x, y) {\n  var len = y.length | 0;\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    x[i] = y[i];\n  }\n  var y_tag = y.tag | 0;\n  if (y_tag !== 0) {\n    x.tag = y_tag;\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_int_compare(x, y) {\n  if (x < y) {\n    return -1;\n  } else if (x === y) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction caml_compare(_a, _b) {\n  while(true) {\n    var b = _b;\n    var a = _a;\n    if (a === b) {\n      return 0;\n    } else {\n      var a_type = typeof a;\n      var b_type = typeof b;\n      if (a_type === \"string\") {\n        var x = a;\n        var y = b;\n        if (x < y) {\n          return -1;\n        } else if (x === y) {\n          return 0;\n        } else {\n          return 1;\n        }\n      } else {\n        var is_a_number = +(a_type === \"number\");\n        var is_b_number = +(b_type === \"number\");\n        if (is_a_number !== 0) {\n          if (is_b_number !== 0) {\n            return caml_int_compare(a, b);\n          } else {\n            return -1;\n          }\n        } else if (is_b_number !== 0) {\n          return 1;\n        } else if (a_type === \"boolean\" || a_type === \"undefined\" || a === null) {\n          var x$1 = a;\n          var y$1 = b;\n          if (x$1 === y$1) {\n            return 0;\n          } else if (x$1 < y$1) {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a_type === \"function\" || b_type === \"function\") {\n          throw [\n                Caml_builtin_exceptions.invalid_argument,\n                \"compare: functional value\"\n              ];\n        } else {\n          var tag_a = a.tag | 0;\n          var tag_b = b.tag | 0;\n          if (tag_a === 250) {\n            _a = a[0];\n            continue ;\n            \n          } else if (tag_b === 250) {\n            _b = b[0];\n            continue ;\n            \n          } else if (tag_a === 248) {\n            return caml_int_compare(a[1], b[1]);\n          } else if (tag_a === 251) {\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  \"equal: abstract value\"\n                ];\n          } else if (tag_a !== tag_b) {\n            if (tag_a < tag_b) {\n              return -1;\n            } else {\n              return 1;\n            }\n          } else {\n            var len_a = a.length | 0;\n            var len_b = b.length | 0;\n            if (len_a === len_b) {\n              var a$1 = a;\n              var b$1 = b;\n              var _i = 0;\n              var same_length = len_a;\n              while(true) {\n                var i = _i;\n                if (i === same_length) {\n                  return 0;\n                } else {\n                  var res = caml_compare(a$1[i], b$1[i]);\n                  if (res !== 0) {\n                    return res;\n                  } else {\n                    _i = i + 1 | 0;\n                    continue ;\n                    \n                  }\n                }\n              };\n            } else if (len_a < len_b) {\n              var a$2 = a;\n              var b$2 = b;\n              var _i$1 = 0;\n              var short_length = len_a;\n              while(true) {\n                var i$1 = _i$1;\n                if (i$1 === short_length) {\n                  return -1;\n                } else {\n                  var res$1 = caml_compare(a$2[i$1], b$2[i$1]);\n                  if (res$1 !== 0) {\n                    return res$1;\n                  } else {\n                    _i$1 = i$1 + 1 | 0;\n                    continue ;\n                    \n                  }\n                }\n              };\n            } else {\n              var a$3 = a;\n              var b$3 = b;\n              var _i$2 = 0;\n              var short_length$1 = len_b;\n              while(true) {\n                var i$2 = _i$2;\n                if (i$2 === short_length$1) {\n                  return 1;\n                } else {\n                  var res$2 = caml_compare(a$3[i$2], b$3[i$2]);\n                  if (res$2 !== 0) {\n                    return res$2;\n                  } else {\n                    _i$2 = i$2 + 1 | 0;\n                    continue ;\n                    \n                  }\n                }\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction caml_equal(_a, _b) {\n  while(true) {\n    var b = _b;\n    var a = _a;\n    if (a === b) {\n      return /* true */1;\n    } else {\n      var a_type = typeof a;\n      if (a_type === \"string\" || a_type === \"number\" || a_type === \"boolean\" || a_type === \"undefined\" || a === null) {\n        return /* false */0;\n      } else {\n        var b_type = typeof b;\n        if (a_type === \"function\" || b_type === \"function\") {\n          throw [\n                Caml_builtin_exceptions.invalid_argument,\n                \"equal: functional value\"\n              ];\n        } else if (b_type === \"number\" || b_type === \"undefined\" || b === null) {\n          return /* false */0;\n        } else {\n          var tag_a = a.tag | 0;\n          var tag_b = b.tag | 0;\n          if (tag_a === 250) {\n            _a = a[0];\n            continue ;\n            \n          } else if (tag_b === 250) {\n            _b = b[0];\n            continue ;\n            \n          } else if (tag_a === 248) {\n            return +(a[1] === b[1]);\n          } else if (tag_a === 251) {\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  \"equal: abstract value\"\n                ];\n          } else if (tag_a !== tag_b) {\n            return /* false */0;\n          } else {\n            var len_a = a.length | 0;\n            var len_b = b.length | 0;\n            if (len_a === len_b) {\n              var a$1 = a;\n              var b$1 = b;\n              var _i = 0;\n              var same_length = len_a;\n              while(true) {\n                var i = _i;\n                if (i === same_length) {\n                  return /* true */1;\n                } else if (caml_equal(a$1[i], b$1[i])) {\n                  _i = i + 1 | 0;\n                  continue ;\n                  \n                } else {\n                  return /* false */0;\n                }\n              };\n            } else {\n              return /* false */0;\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction caml_notequal(a, b) {\n  return 1 - caml_equal(a, b);\n}\n\nfunction caml_greaterequal(a, b) {\n  return +(caml_compare(a, b) >= 0);\n}\n\nfunction caml_greaterthan(a, b) {\n  return +(caml_compare(a, b) > 0);\n}\n\nfunction caml_lessequal(a, b) {\n  return +(caml_compare(a, b) <= 0);\n}\n\nfunction caml_lessthan(a, b) {\n  return +(caml_compare(a, b) < 0);\n}\n\nvar caml_int32_compare = caml_int_compare;\n\nvar caml_nativeint_compare = caml_int_compare;\n\nexports.caml_obj_dup           = caml_obj_dup;\nexports.caml_obj_truncate      = caml_obj_truncate;\nexports.caml_lazy_make_forward = caml_lazy_make_forward;\nexports.caml_update_dummy      = caml_update_dummy;\nexports.caml_int_compare       = caml_int_compare;\nexports.caml_int32_compare     = caml_int32_compare;\nexports.caml_nativeint_compare = caml_nativeint_compare;\nexports.caml_compare           = caml_compare;\nexports.caml_equal             = caml_equal;\nexports.caml_notequal          = caml_notequal;\nexports.caml_greaterequal      = caml_greaterequal;\nexports.caml_greaterthan       = caml_greaterthan;\nexports.caml_lessthan          = caml_lessthan;\nexports.caml_lessequal         = caml_lessequal;\n/* No side effect */\n"},"hash":"ec803932f88d88a88859334c436e91b1"}