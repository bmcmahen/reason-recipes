{"dependencies":[],"generated":{"js":"'use strict';\n\n\nfunction caml_int32_float_of_bits(x) {\n  var int32 = new Int32Array(/* array */[x]);\n  var float32 = new Float32Array(int32.buffer);\n  return float32[0];\n}\n\nfunction caml_int32_bits_of_float(x) {\n  var float32 = new Float32Array(/* float array */[x]);\n  return new Int32Array(float32.buffer)[0];\n}\n\nfunction caml_classify_float(x) {\n  if (isFinite(x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) {\n      return /* FP_normal */0;\n    } else if (x !== 0) {\n      return /* FP_subnormal */1;\n    } else {\n      return /* FP_zero */2;\n    }\n  } else if (isNaN(x)) {\n    return /* FP_nan */4;\n  } else {\n    return /* FP_infinite */3;\n  }\n}\n\nfunction caml_modf_float(x) {\n  if (isFinite(x)) {\n    var neg = +(1 / x < 0);\n    var x$1 = Math.abs(x);\n    var i = Math.floor(x$1);\n    var f = x$1 - i;\n    if (neg) {\n      return /* tuple */[\n              -f,\n              -i\n            ];\n    } else {\n      return /* tuple */[\n              f,\n              i\n            ];\n    }\n  } else if (isNaN(x)) {\n    return /* tuple */[\n            NaN,\n            NaN\n          ];\n  } else {\n    return /* tuple */[\n            1 / x,\n            x\n          ];\n  }\n}\n\nfunction caml_ldexp_float(x, exp) {\n  var match_000 = [x];\n  var match_001 = [exp];\n  var exp$prime = match_001;\n  var x$prime = match_000;\n  if (exp$prime[0] > 1023) {\n    exp$prime[0] -= 1023;\n    x$prime[0] = x$prime[0] * Math.pow(2, 1023);\n    if (exp$prime[0] > 1023) {\n      exp$prime[0] -= 1023;\n      x$prime[0] = x$prime[0] * Math.pow(2, 1023);\n    }\n    \n  } else if (exp$prime[0] < -1023) {\n    exp$prime[0] += 1023;\n    x$prime[0] = x$prime[0] * Math.pow(2, -1023);\n  }\n  return x$prime[0] * Math.pow(2, exp$prime[0]);\n}\n\nfunction caml_frexp_float(x) {\n  if (x === 0 || !isFinite(x)) {\n    return /* tuple */[\n            x,\n            0\n          ];\n  } else {\n    var neg = +(x < 0);\n    var x$prime = Math.abs(x);\n    var exp = Math.floor(Math.LOG2E * Math.log(x$prime)) + 1;\n    x$prime = x$prime * Math.pow(2, -exp);\n    if (x$prime < 0.5) {\n      x$prime = x$prime * 2;\n      exp -= 1;\n    }\n    if (neg) {\n      x$prime = -x$prime;\n    }\n    return /* tuple */[\n            x$prime,\n            exp | 0\n          ];\n  }\n}\n\nfunction caml_float_compare(x, y) {\n  if (x === y) {\n    return 0;\n  } else if (x < y) {\n    return -1;\n  } else if (x > y || x === x) {\n    return 1;\n  } else if (y === y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_copysign_float(x, y) {\n  var x$1 = Math.abs(x);\n  var y$1 = y === 0 ? 1 / y : y;\n  if (y$1 < 0) {\n    return -x$1;\n  } else {\n    return x$1;\n  }\n}\n\nfunction caml_expm1_float(x) {\n  var y = Math.exp(x);\n  var z = y - 1;\n  if (Math.abs(x) > 1) {\n    return z;\n  } else if (z === 0) {\n    return x;\n  } else {\n    return x * z / Math.log(y);\n  }\n}\n\nfunction caml_hypot_float(x, y) {\n  var match_000 = Math.abs(x);\n  var match_001 = Math.abs(y);\n  var y0 = match_001;\n  var x0 = match_000;\n  var a = Math.max(x0, y0);\n  var b = Math.min(x0, y0) / (\n    a !== 0 ? a : 1\n  );\n  return a * Math.sqrt(1 + b * b);\n}\n\nfunction caml_log10_float(x) {\n  return Math.LOG10E * Math.log(x);\n}\n\nexports.caml_int32_float_of_bits = caml_int32_float_of_bits;\nexports.caml_int32_bits_of_float = caml_int32_bits_of_float;\nexports.caml_classify_float      = caml_classify_float;\nexports.caml_modf_float          = caml_modf_float;\nexports.caml_ldexp_float         = caml_ldexp_float;\nexports.caml_frexp_float         = caml_frexp_float;\nexports.caml_float_compare       = caml_float_compare;\nexports.caml_copysign_float      = caml_copysign_float;\nexports.caml_expm1_float         = caml_expm1_float;\nexports.caml_hypot_float         = caml_hypot_float;\nexports.caml_log10_float         = caml_log10_float;\n/* No side effect */\n"},"hash":"f7d7f12d4f202336612dc5930b7affb6"}